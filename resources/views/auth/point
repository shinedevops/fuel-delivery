@foreach ($userDetails as $dedails)

<tr>
    <td>
        <div class="table-data">
            <div class="table-img">
                <img src="/assets/images/table-img1.png" alt="">
            </div>
            {{ $dedails->name }}
        </div>
    </td>
    <td>
        <div class="table-data">
            <i class="fa-solid fa-envelope"></i>
            {{ $dedails->email}}
        </div>
    </td>
    <td>
        <div class="table-data">
            <i class="fa-solid fa-phone"></i>
            {{ $dedails->phone }}
        </div>
    </td>
    <td>
        <div class="table-data">
            <i class="fa-solid fa-building"></i>
            {{ $dedails->company }}
        </div>
    </td>
    <td>
        <div class="table-data">
            <i class="fa-solid fa-trash-can"></i>
        </div>
    </td>
</tr>
@endforeach


// Data for editdata
public function editdata(Request $request)
{
try {
$userId = $request->input('user_id');

// Fetch user data
$user = User::find($userId);

if (!$user) {
throw new \Exception('User not found');
}

$userDetails = $user->userDetails; // if relation

// both user and userDetails as JSON
return response()->json([
'user' => $user,
'userDetails' => $userDetails,
]);
} catch (\Exception $e) {
return response()->json(['error' => $e->getMessage()], 500);

}
}  

// Update ( with route )
public function edit(Request $request, $id)
{
$userId = $id;

$request->validate([
'nameedit' => 'required|string',
'emailedit' => 'required|email|unique:users,email', // Fix the 'emailedit' to 'email' here
'phoneedit' => 'required|numeric',
], [
'emailedit.unique' => 'Email already exists',
'phoneedit.numeric' => 'Phone must be a number',
]);

$user = User::find($userId); // Find the user by ID

if (!$user) {
return redirect()->back()->with('error', 'User not found');
}

$user->name = $request->input('nameedit');
$user->email = $request->input('emailedit');
$user->save();

$userDetails = $user->userDetails; // Assuming the relationship name is userDetails()

if (!$userDetails) {
// Create a new UserDetails record if it doesn't exist
$userDetails = new UserDetails();
$userDetails->user_id = $userId;
}

$userDetails->phone_number = $request->input('phoneedit');
$userDetails->save();

return redirect()->back()->with('successupdate', 'User details updated successfully');

}